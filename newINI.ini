#####################################################################
##	Chaudhuri parameters - initializing all chaudhuri algorithm 
##	properties including GPU properties
##  DO NOT SET SPACES AFTER EQUATION SIGN
#####################################################################
[Chudhuri]

imRows=2080
imCols=3096
isGPUOptimization=false # if using GPU set this value to true
isNormalize=false
isDisplayProgress=true
isConvert=false # if true the image will be converted to the specified format
isCalculateLsigma=true # if true the parameters will be updated on runtime depemd on input image size
imDepth=CV_16U # use opencv depth codes CV_16U or CV_8U
L=10.8 # L as in article
T=8.0 #T as in article
sigma=1.9 #sigma as in article # 2.5 #
numOfKerRotations=12 #number of kernel rotations 
dispCutMin=0.0
dispCutMax=1.0


#####################################################################
##	preprocess parameters - initializing all preprocess 
##	properties including GPU properties - when applied
##  DO NOT SET SPACES AFTER EQUATION SIGN
#####################################################################
[Preprocess]

isBlur=true #if true image will be blurred
isNiBlack=true #if true niblack algo will apply o image
isMask=true #if true a mask will be created

#illumination enhancement parameters CLAHE
clipLimit=3.5
tileGridSize=[4,4,0,0] # written as rectangle only 2 coordinates applicable

# mask thresholding
cvThresholdType=THRESH_OTSU #when thres otsu applied in C++ we'll use cv::THRESH_BINARY | cv::THRESH_OTSU other option: cv::THRESH_BINARY | cv::THRESH_TRIANGLE
otherThreshType=-1 # -1 mean ignor this parameter otherwise self thresholding methods will be applied 0 - zer0, 1- adaptive
adaptiveThresType=ADAPTIVE_THRESH_MEAN_C #ADAPTIVE_THRESH_GAUSSIAN_C is optional
blockSize=3 #filtering block size
maxValue=1	# maximal value to assign to pixel in case of > thresh
C=0	#constant reduced from local pixels environment
thresh=0	# threshold using otsu or triangle the value is decided by the algorithm
threshFactor=0.5 #factor to apply on automatic threshold in order to avoid internal blanks

# blur parameters
sigmaX=4.0 #in gaussian x direction - in bilateral color std
sigmaY=4.0) #in gaussian y direction - if 0 as x, in bilateral std in coordinate space
diameter=1.0 #in bilateral use only each pixel neighborhood diameter
winSize=[13,13,0,0] #filtering window size
method=EBM_GAUSSIAN #method one of the enum options EBM_BLUR, EBM_MEDIAN, EBM_BILATERAL
isConvertToUint=false #if true after aplying blur method the image is converted to uint8 ot uint16 depends on source image depth
isNormalizeClahe=true #if true image will be normalized before casting to uint for clahe algo
convert2type=CV_16U #convert ti type CV_8U or CV_16U for CLAHE algo

#niblack parameters
NBwinSize=[100,100,0,0]
kapa=0.2
offset=0.0


[PostProcParameters]

isDisplayMorphProgress=true # if true progress will be displayed on terminal
PPisNormalize=true
morphKerLength=17 # length of the strel line
numMorphKerRotations=36 # number of erode itterations
PPdisplatCutMin=0.0
PPdisplayCutMax = 0.15
PPisConvert=false #if true applies conversion to image format\type
PPimDepth=CV_16U
PPisDilate=true
PPcirclePatternParams=[0,0,2,3] # presented as Rect- first two coordinates are circle center, 3rd - radius of dilate, 4th - radiius of close
PPadaptiveLowBlockSize=61
PPadaptiveHighBlockSize=201
PPadaptiveMeanShift=-4
PPadaptiveMaxValue=255
PPisAutoBrightness=false #if true display cut will be calculated automatically
PPstartCutValue=0.25
PPthreshCutValue=0.05
PPnumMorphItter=2
PPisCvDisplay=true # if true image will be converted by default to CV_8U
PPisUseDispCut=false #if true image will be normalized using dispCut optimization result